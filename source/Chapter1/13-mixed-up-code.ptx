<?xml version="1.0"?>
<exercises xml:id="chapter11_mixed-up-code-practice">
  <title>Mixed Up Code Practice</title>
  <p>Answer the following <term>Mixed-Up Code</term> questions to assess what you have learned in
    this chapter.</p>
  <exercise label="mucp_11_1"
            number="yes"
            adaptive="yes"
            indentation="show">
    <statement>
        <p>Construct a block of code that would make the print function into a member function.</p>
        <program line-numbers="yes">
          <code><![CDATA[
struct Student {
     int id, year;
     string name;
};

void printStudent(const Student& stu) {
     cout << stu.id << ":" << stu.year << ":" << stu.name << endl;
}

int main( ) {
      Student s1 = { 56673, 2023, "Bob" };
      printStudent (s1);
}
]]></code>
        </program>
    </statement>
    <blocks>
      <block order="7">
        <cline>struct Student {</cline>
      </block>
      <block order="11">
        <cline>int id, year;</cline>
        <cline>string name;</cline>
      </block>
      <block order="5">
        <cline>void print();</cline>
      </block>
      <block order="3">
        <cline>};</cline>
      </block>
      <block order="9"
             correct="no">
        <cline>} </cline>
      </block>
      <block order="1">
        <cline>void Student::print() {</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>void Student::print(const Student&amp; stu) { </cline>
      </block>
      <block order="6">
        <cline>Student stu = *this;</cline>
      </block>
      <block order="8">
        <cline><![CDATA[cout << stu.id << ":" << stu.year << ":" << stu.name << endl;]]></cline>
        <cline>}</cline>
      </block>
      <block order="10">
        <cline>int main() {</cline>
        <cline>Student s1 = { 56673, 2023, "Bob" };</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>printStudent (s1); </cline>
      </block>
      <block order="12">
        <cline>s1.print();</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_2"
            number="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Let's make an album! Write the struct definition for
        Album, which should have instance variables name and year (in that order).
        Include a member function called check that returns true if
        the song was released after 2015.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>struct Album {</cline>
      </block>
      <block order="5"
             correct="no">
        <cline>string Album {  </cline>
      </block>
      <block order="3">
        <cline>   string name;</cline>
      </block>
      <block order="4">
        <cline>   int year;</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>   bool check();</cline>
        </choice>
        <choice>
          <cline>   void check(); </cline>
        </choice>
      </block>
      <block order="8">
        <cline>};</cline>
      </block>
      <block order="11"
             correct="no">
        <cline>void Album::check() { </cline>
      </block>
      <block order="10">
        <cline>bool Album::check() {</cline>
      </block>
      <block order="6">
        <cline>if (year &gt; 2015) {</cline>
        <cline>  return true;</cline>
        <cline>}</cline>
        <cline>else {</cline>
        <cline>  return false;</cline>
        <cline>}</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_3"
            number="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Put the necessary blocks of code in the correct order to establish
        the convertToSeconds member function.</p>
    </statement>
    <blocks>
      <block order="5"
             correct="no">
        <cline>double convertToSeconds(const Time&amp; time) { </cline>
      </block>
      <block order="6">
        <cline>double Time::convertToSeconds() const {</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>double Time::convertToSeconds() { </cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>int minutes = time.hour * 60 + time.minutes;</cline>
          <cline>double seconds = minutes * 60 + time.second;</cline>
        </choice>
        <choice>
          <cline>int minutes = hour * 60 + minutes;</cline>
          <cline>double seconds = minutes * 60 + second; </cline>
        </choice>
      </block>
      <block order="3">
        <cline> return seconds;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_4"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Create the Student::is_older() function as it would be defined INSIDE
        of the Student structure definition. This function checks if the current
        Student is older than another Student. The function is invoked on the
        current Student.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>bool is_older(const Student&amp; stu) const {</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>bool is_older(Student&amp; stu) { </cline>
      </block>
      <block order="2"
             correct="no">
        <cline>bool Student::is_older(const Student&amp; stu, const Student&amp; s1) { </cline>
      </block>
      <block order="1"
             correct="no">
        <cline>bool Student::is_older(const Student&amp; stu) { </cline>
      </block>
      <block order="5"
             correct="no">
        <cline>Student stu = *this; </cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>if (age &gt; stu.age) {return true;}</cline>
        </choice>
        <choice>
          <cline>if (stu.age &gt; s1.age) {return true;} </cline>
        </choice>
      </block>
      <block order="3">
        <cline>else {return false;}</cline>
      </block>
      <block order="9"
             correct="no">
        <cline>}; </cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_5"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Put the necessary blocks of code in the correct order to initialise
        a constructor for type Days that takes in the number of days and
        initialises the member variables days, weeks, years (in that order).</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>Days::Days(int num_days) {</cline>
      </block>
      <block order="11"
             correct="no">
        <cline>void Days::Days(int num_days) { </cline>
      </block>
      <block order="8"
             correct="no">
        <cline>Construct::Days(int num_days) { </cline>
      </block>
      <block order="7"
             correct="no">
        <cline>Days(int num_days) { </cline>
      </block>
      <block order="9">
        <cline>years = num_days / 365;</cline>
      </block>
      <block order="1">
        <cline>Days day;</cline>
      </block>
      <block order="12">
        <cline>num_days -= years * 365;</cline>
      </block>
      <block order="5">
        <cline>weeks = num_days / 7;</cline>
      </block>
      <block order="6">
        <cline>num_days -= weeks * 60.0;</cline>
      </block>
      <block order="3">
        <cline>days = num_days;</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>}; </cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_6"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write two constructors for Student. One with no arguments and
        one with arguments. Put the necessary blocks of code in
        the correct order.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>Student::Student() {</cline>
      </block>
      <block order="8">
        <cline>void Student::Student() {</cline>
      </block>
      <block order="2">
        <cline>id = 123456789;</cline>
        <cline>year = 2020;</cline>
        <cline>name = "Alice";</cline>
        <cline>}</cline>
      </block>
      <block order="5"
             correct="no">
        <cline>stu.id = 123456789;</cline>
        <cline>stu.year = 2020;</cline>
        <cline>stu.name = "Alice";</cline>
        <cline>}                     </cline>
      </block>
      <block order="6">
        <cline>Student::Student(int id_in, int year_in, string name_in) {</cline>
      </block>
      <block order="9">
        <cline>Student::Student construct(int id_in, int year_in, string name_in) {</cline>
      </block>
      <block order="4">
        <cline>id = id_in;</cline>
      </block>
      <block order="10">
        <cline>year = year_in;</cline>
      </block>
      <block order="11">
        <cline>name = name_in;</cline>
      </block>
      <block order="1"
             correct="no">
        <cline>};  </cline>
      </block>
      <block order="7">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_7"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Implement two constructors for the Penguin structure. One should
        be a default constructor, the other should take arguments. The
        weight needs to be converted from pounds to kilograms in the second constructor</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>struct Penguin {</cline>
      </block>
      <block order="8">
        <cline>int age;</cline>
        <cline>int weight;</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>Penguin();</cline>
        </choice>
        <choice>
          <cline>void Penguin(); </cline>
        </choice>
      </block>
      <block order="5">
        <cline>Penguin(int age_in; int weight_in);</cline>
      </block>
      <block order="13"
             correct="no">
        <cline>void Penguin(int age_in; int weight_in); </cline>
      </block>
      <block order="14">
        <cline>};</cline>
      </block>
      <block order="7">
        <cline>Penguin::Penguin() {</cline>
      </block>
      <block order="2">
        <cline>age = 1;</cline>
        <cline>weight = 24;</cline>
      </block>
      <block order="11">
        <cline>}</cline>
      </block>
      <block order="9">
        <cline>Penguin::Penguin(int age_in, int weight_in) {</cline>
      </block>
      <block order="10">
        <cline>age = age_in;</cline>
        <cline>weight = weight_in;</cline>
      </block>
      <block order="12"
             correct="no">
        <cline>penguin.age = age_in;</cline>
        <cline>penguin.weight = weight_in; </cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_8"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Put the necessary blocks of code in the correct order to make the
        AddDays function below a member function a member function.</p>
      <program>Days AddDays(const Days&amp; d1, const Days&amp; d2) {
        int days = convertToDays (d1) + convertToDays(d2);
        return makeDays (days);
        }</program>
    </statement>
    <blocks>
      <block order="6">
        <cline>Days Days::add(const Days&amp; d2) const {</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>Days Days::add(const Days&amp; d2) { </cline>
      </block>
      <block order="3"
             correct="no">
        <cline>Days Days::add() { </cline>
      </block>
      <block order="1">
        <cline>int days = convertToDays() + d2.convertToDays();</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>int days = d1.convertToDays() + d2.convertToDays(); </cline>
      </block>
      <block order="5">
        <cline>Days day (days);</cline>
      </block>
      <block order="2">
        <cline>return day;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_9"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Put the necessary blocks of code in the correct order to create a struct
        Penguin that stores name and age (in that order). In addition have 2 constructors and
        declare Penguins in main such that both are called.</p>
    </statement>
    <blocks>
      <block order="12">
        <cline>struct Penguin {</cline>
        <cline> int age;</cline>
        <cline> string name;</cline>
      </block>
      <block order="1">
        <cline> Penguin();</cline>
        <cline> Penguin(int age_in, string name);</cline>
        <cline>};</cline>
      </block>
      <block order="9"
             correct="no">
        <cline> void Penguin();</cline>
        <cline> void Penguin(int age_in, string name);</cline>
        <cline>};                                         </cline>
      </block>
      <block order="2">
        <cline>Penguin::Penguin() {</cline>
        <cline>age = 1;</cline>
        <cline>name = "Alice";</cline>
        <cline>}</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>Penguin::Penguin() const {</cline>
        <cline>p1.age = 1;</cline>
        <cline>p1.name = "Alice";</cline>
        <cline>}                                     </cline>
      </block>
      <block order="11">
        <cline>Penguin::Penguin(int age_in, string name_in) {</cline>
        <cline>age = age_in;</cline>
        <cline>name = name_in;</cline>
        <cline>}</cline>
      </block>
      <block order="5"
             correct="no">
        <cline>void Penguin::Penguin(int age_in, string name_in) const {</cline>
        <cline>age = age_in;</cline>
        <cline>name = name_in;</cline>
        <cline>}                                </cline>
      </block>
      <block order="10"
             correct="no">
        <cline>Penguin::Penguin(int age_in, string name_in) {</cline>
        <cline>p1.age = age_in;</cline>
        <cline>p1.name = name_in;</cline>
        <cline>}                                    </cline>
      </block>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="6">
        <cline>Penguin p1();</cline>
        <cline>Penguin p2 (3, "Bob");</cline>
      </block>
      <block order="7"
             correct="no">
        <cline>Penguin p1();</cline>
        <cline>Penguin p2 (age_in, name_in);        </cline>
      </block>
      <block order="8">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mucp_11_10"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Put the necessary blocks of code in the correct order in order to write
        a header (.h) file for the struct Student.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>struct Student {</cline>
      </block>
      <block order="8">
        <cline>// instance variables</cline>
        <cline>int id, year;</cline>
        <cline>string name;</cline>
      </block>
      <block order="7">
        <cline>// constructors</cline>
        <cline>Student(int id, int year, string name);</cline>
        <cline>Student();</cline>
      </block>
      <block order="4"
             correct="no">
        <cline>// constructors</cline>
        <cline>Student::Student() const;</cline>
        <cline>Student::Student(int id, int year, string name);      </cline>
      </block>
      <block order="1">
        <cline>// functions</cline>
        <cline>void print() const;</cline>
        <cline>bool after(const Student&amp; stu) const;</cline>
      </block>
      <block order="5"
             correct="no">
        <cline>int main() {                        </cline>
      </block>
      <block order="9"
             correct="no">
        <cline>Student s1;                  </cline>
      </block>
      <block order="3"
             correct="no">
        <cline>}                            </cline>
      </block>
      <block order="6">
        <cline>};</cline>
      </block>
    </blocks>
  </exercise>
</exercises>
