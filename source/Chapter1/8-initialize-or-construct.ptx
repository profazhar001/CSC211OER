<?xml version="1.0"?>
<section xml:id="chapter11_initialize-or-construct">
  <title>Initialize or construct?</title>
  <p>Earlier we declared and initialized some <c>Time</c> structures using squiggly-braces:</p>
  <program>Time currentTime = { 9, 14, 30.0 };
Time breadTime = { 3, 35, 0.0 };</program>
  <p>Now, using constructors, we have a different way to declare and
    initialize:</p>
  <program>
Time time(seconds);
</program>
  <p>These two functions represent different programming styles, and
    different points in the history of C++. Maybe for that reason, the C++
    compiler requires that you use one or the other, and not both in the
    same program.</p>
  <p>If you define a constructor for a structure, then you have to use the
    constructor to initialize all new structures of that type. The alternate
    syntax using squiggly-braces is no longer allowed.</p>
  <p>Fortunately, it is legal to overload constructors in the same way we overloaded functions. In
    other words, there can be more than one constructor with the same <q>name,</q> as long as they
    take different parameters. Then, when we initialize a new object the compiler will try to find a
    constructor that takes the appropriate parameters.</p>
  <p>For example, it is common to have a constructor that takes one parameter
    for each instance variable, and that assigns the values of the
    parameters to the instance variables:</p>
  <program>Time::Time(int h, int m, double s) {
  hour = h;  minute = m;  second = s;
}</program>
  <p>To invoke this constructor, we use the same funny syntax as before, except that the arguments
    have to be two integers and a <c>double</c>:</p>
  <program>
Time currentTime(9, 14, 30.0);
</program>
  <listing label="initialize_or_construct_AC_1"
           xml:id="initialize_or_construct_AC_1">
    <title>
      In this active code, you can experiment passing values into the two
      different constructors that we have defined on this page and the previous
      page.
    </title>
    <program label="initialize_or_construct_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

struct Time {
    int hour, minute;
    double second;
    Time(double secs);
    Time(int h, int m, double s);
    void print();
};

int main() {
    Time marathon(9000);
    cout << "My marathon time is "; marathon.print(); cout << "." << endl;
    Time race(7, 30, 0.0);
    cout << "My next race is at "; race.print(); cout << "." << endl;
}

        ]]></code>
      <tests>

Time::Time(double secs) {
  hour = int(secs / 3600.0);
  secs -= hour * 3600.0;
  minute = int(secs / 60.0);
  secs -= minute * 60.0;
  second = secs;
}

Time::Time(int h, int m, double s) {
  hour = h; minute = m; second = s;
}

void Time::print() {
  cout &lt;&lt; hour &lt;&lt; ":" &lt;&lt; minute &lt;&lt; ":" &lt;&lt; second;
}
</tests>
    </program>
  </listing>
  <exercise label="initialize_or_construct_1">
    <statement>
      <p>Which statement is <term>false</term> about constructors?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>When we initialize a new object, the compiler automatically finds the correct
            constructor to use.</p>
        </statement>
        <feedback><p>
          Incorrect! This statement is true!
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>You can always initialize an object using squiggly-braces.</p>
        </statement>
        <feedback><p>
          Correct! Once you define a constructor, you can no longer use squiggly-braces to
            initialize an object.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>You can have many constructors with the same name.</p>
        </statement>
        <feedback><p>
          Incorrect! This statement is true, as long as the constructors take different
            parameters.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>Once you define a constructor for a structure, you MUST use it to initialize any new
            structures of that type.</p>
        </statement>
        <feedback><p>
          Incorrect! This statement is true!
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="initialize_or_construct_2">
    <statement>
      <p>What is the term for having multiple constructors with the same <q>name</q> that take
        different parameters?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>friend constructors</p>
        </statement>
        <feedback><p>
          Incorrect! "Friend" constructors are constructors that are private except to the friend
            class.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>overriding</p>
        </statement>
        <feedback><p>
          Incorrect! Overriding is the ability of an inherited class to rewrite the methods of
            the base class at runtime, not what we're looking for here.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>overloading</p>
        </statement>
        <feedback><p>
          Correct!
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>friend class</p>
        </statement>
        <feedback><p>
          Incorrect! A friend class is a class that can access private members of another class,
            not what we're looking for here.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="initialize_or_construct_3"
            number="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Implement two constructors for the <c>Dog</c> structure. One should be a default constructor,
        the other should take arguments. The weight needs to be converted from pounds to kilograms
        in the second constructor (for reference, 1 kilogram is approximately 2.2 pounds).</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>struct Dog {</cline>
      </block>
      <block order="10">
        <cline> int age, weight;</cline>
        <cline> string breed;</cline>
      </block>
      <block order="8">
        <cline> Dog();</cline>
        <cline> Dog(int age_in, int weight_in, string breed_in);</cline>
      </block>
      <block order="3">
        <cline>};</cline>
      </block>
      <block order="1">
        <cline>Dog::Dog() {</cline>
      </block>
      <block order="4">
        <cline> breed = "mutt";</cline>
        <cline> age = 1;</cline>
        <cline> weight = 18;</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
      <block order="9">
        <cline>Dog::Dog(int age_in, int weight_in, string breed_in) {</cline>
      </block>
      <block order="5">
        <cline> breed = breed_in;</cline>
        <cline> age = age_in;</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline> weight = weight_in / 2.2;</cline>
          <cline>}</cline>
        </choice>
        <choice>
          <cline> weight = weight_in * 2.2;                         </cline>
          <cline>}</cline>
        </choice>
      </block>
    </blocks>
  </exercise>
</section>
